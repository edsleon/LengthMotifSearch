package proyecto;
import java.util.Random;

//package proyecto;


/**
 * @author Edson
 */
public class Proyecto {
	static private int n=1000; //TAMAÑO DE LA POBLACION
	static private int m=n/2; //CANTIDAD DE OPERACIONES GENETICAS
	static private Poblacion poblacion=new Poblacion(n); //SE GENERA LA POBLACION INICIAL   
	static private Individuo[] poblaciontemporal=new Individuo[n]; //SE GENERA LA POBLACION INICIAL
	static private int posiciontemporal=0;
        static Random rd=new Random();
        static int generaciones=100;
        static SeleccionPadres selecciondepadres=new SeleccionPadres(poblacion);
        static Individuo padre1;
        static Individuo padre2;
    
    static int contador=0;
	
    public static void main(String[] args) 
    {   
    	poblacion.Imprimirpoblacion();
        for(int i=0;i<generaciones;i++)
        {
        	//System.out.println(i);
        	Iteraciones();
        	
        }
        poblacion.Imprimirpoblacion();
        
        
    }
    private static void Iteraciones() 
    {
    	int i=0;
    	double random;
        
    		//////////////////
    		//////////////////SE DEFINEN LOS PADRES Y CREAMOS LOS DOS HIJOS IGUALES A LOS PADRES

    		for(int k=0;k<m;k++) // CICLO DE LAS OPERACIONES GENETICAS
    		{
                    posiciontemporal=0;
                    for(i=0;i<poblacion.getn();i=i+2) // CICLO POR POBLACION
                    {
                        selecciondepadres.calcularPadres();
                        padre1=selecciondepadres.getPadre1();
                        //System.out.println(padre1.getcromosoma());
                        padre2=selecciondepadres.getPadre2();
                        //System.out.println(padre2.getcromosoma());
	    		if(rd.nextDouble()<0.4)
	    		{
	    			Mutacion(padre1,padre2);
	    		}
	    		else
	    		{
	    			Cruce(padre1,padre2);
	    		}
                    }
    		}
 
    	poblacion.setPoblacion(poblaciontemporal);
        selecciondepadres.setPoblacion(poblaciontemporal);
        poblacion.Imprimirpoblacion();  
	}
	static void Mutacion(Individuo padre1,Individuo padre2) //OPERACIONES DE MUTACION
    {
    		int i=0;
    		//////////////////DOS POSICIONES ALEATORIAS CON TAMANO MAXIMO EL TAMANO DEL INDIVIDUO
    		int pos1=rd.nextInt(padre1.getTamano());
    		int pos2=rd.nextInt(padre2.getTamano());
    		Individuo hijo1=null;
    		Individuo hijo2=null;
    		
    		//////////////////
    		//////////////////SE DETERMINA LA BASE QUE SE CAMBIARA DISTINTA LA LA QUE YA TIENE
    		String base="";
    		do //CICLO QUE SE REPETIRA SIEMPRE QUE LA BASE SEA LA MISMA A LA ENCONTRADA EN LA POS ALEATORIA
    		{
	    		int random=rd.nextInt(4); //SELECCIONA U8N NUM ALEATORIO DE 1 A 4
	            switch(random) // DE FORMA ALEATORIA INGRESA LAS BASES NUCLEOTICAS
	            {
	                case 0:
	                	base="C";break;
	                case 1:
	                	base="G";break;
	                case 2:
	                	
	                	base="A";break;
	                case 3:
	                	base="U";break;
	            }   
	            
    		}while(base.equals(padre1.getcromosoma().substring(pos1,pos1+1))); //CICLO QUE SE REPETIRA SIEMPRE QUE LA BASE SEA LA MISMA A LA ENCONTRADA EN LA POS ALEATORIA
    		
    		String base2="";
    		do //CICLO QUE SE REPETIRA SIEMPRE QUE LA BASE SEA LA MISMA A LA ENCONTRADA EN LA POS ALEATORIA
    		{
	    		int random=rd.nextInt(4); 
	            switch(random) // DE FORMA ALEATORIA INGRESA LAS BASES NUCLEOTICAS
	            {
	                case 0:
	                	base2="C";break;
	                case 1:
	                	base2="G";break;
	                case 2:
	                	
	                	base2="A";break;
	                case 3:
	                	base2="U";break;
	            }   
	            
    		}while(base2.equals(padre2.getcromosoma().substring(pos2,pos2+1)));
               		
    		//////////////////
    		//////////////////CREA LOS NUEVOS HIJOS CONCATENANDO DOS SUBCADENAS DEL PADRE Y AGREGANDO LA NUEVA BASE
    		hijo1=new Individuo(padre1.getcromosoma().substring(0, pos1)+base+(padre1.getcromosoma().substring(pos1+1)));
    		hijo2=new Individuo(padre2.getcromosoma().substring(0, pos2)+base2+(padre2.getcromosoma().substring(pos2+1)));
    		
                //System.out.println("Padre1 "+padre1.getcromosoma()+" Padre2"+padre2.getcromosoma()+" Hijo1"+hijo1.getcromosoma()+" Hijo1"+hijo2.getcromosoma());
                
            Reemplazo(padre1,padre2,hijo1,hijo2);    //REEMPLAZAMOS POR RULETA        
    }
    static void Cruce(Individuo padre1,Individuo padre2) //OPERACIONES DE CRUZE
    {
		Individuo hijo1=new Individuo(padre1.getcromosoma());
		Individuo hijo2=new Individuo(padre1.getcromosoma());
    	int i=0;		
		//////////////////
		//////////////////DOS POSICIONES ALEATORIAS CON TAMANO MAXIMO EL TAMANO DEL INDIVIDUO MAS PEQUEÑO
		int tam=0;
				if(padre1.getTamano()<padre2.getTamano())
				{
					tam=padre1.getTamano();
				}
				else
				{
					tam=padre2.getTamano();
				}
				
		int pos=rd.nextInt(tam); // SE GENERA LA POSICION ALEATORIA ENTRE 0 Y EL TAMANO DEL PADRE MAS PEQUENO
		hijo1=new Individuo(padre1.getcromosoma().substring(0, pos)+padre2.getcromosoma().substring(pos)); //CRUCE ENTRE LOS PADRES
		hijo2=new Individuo(padre2.getcromosoma().substring(0, pos)+padre1.getcromosoma().substring(pos)); //CRUCE ENTRE LOS PADRES
		
        Reemplazo(padre1,padre2,hijo1,hijo2); //REEMPLAZAMOS POR RULETA
    }
    static void Reemplazo(Individuo padre1,Individuo padre2, Individuo hijo1, Individuo hijo2) //METODO DE REEMPLAZAR POR RULETA
    {
        //Individuo padre1=poblacion.getpoblacion()[pos];
        //Individuo padre2=poblacion.getpoblacion()[pos+1];    
        Individuo mejorpadre;
	Individuo peorpadre;
	Individuo mejorhijo;
	Individuo peorhijo;  
	        
        /// DETERMINAR LOS MEJORES Y PEORES INDIVIDUOS ACORDE AL PESO DE CADA UNO
        if(padre1.getPeso()<padre2.getPeso())
        {
            peorpadre=new Individuo(padre1.getcromosoma());
            mejorpadre=new Individuo(padre2.getcromosoma());
        }
        else
        {
            peorpadre=new Individuo(padre2.getcromosoma());
            mejorpadre=new Individuo(padre1.getcromosoma()); 
        }
        
        if(hijo1.getPeso()<hijo2.getPeso())
        {
            peorhijo=new Individuo(hijo1.getcromosoma());
            mejorhijo=new Individuo(hijo2.getcromosoma());
        }
        else
        {
            peorhijo=new Individuo(hijo2.getcromosoma());
            mejorhijo=new Individuo(hijo1.getcromosoma()); 
        }
        
        ///////////////////////////////////////////////////
        /////  DETERMINAR EL MEJOR INDIVIDUO
        
        double sumamejorespesos=mejorpadre.getPeso()+mejorhijo.getPeso();
        double sumapeorespesos=peorpadre.getPeso()+peorhijo.getPeso();
        double aleatorio=rd.nextDouble();
        
        ////REALIZA RULETA SOBRE LOS MEJORES PADRES E HIJOS
        if(sumamejorespesos>0)
        {
            if ((aleatorio<mejorpadre.getPeso()/sumamejorespesos))
            {
            	//poblaciontemporal.setIndividuoPoblacion(mejorpadre,posiciontemporal);
            	poblaciontemporal[posiciontemporal]=mejorpadre;
            	posiciontemporal=posiciontemporal+1;
            }
            else
            {
            	//poblaciontemporal.setIndividuoPoblacion(mejorhijo,posiciontemporal);
            	poblaciontemporal[posiciontemporal]=mejorhijo;
            	posiciontemporal=posiciontemporal+1;
            }
        }
        else
        {
        	//poblaciontemporal.setIndividuoPoblacion(mejorpadre,posiciontemporal);
        	poblaciontemporal[posiciontemporal]=mejorpadre;
        	posiciontemporal=posiciontemporal+1;
        }
        ////REALIZA RULETA SOBRE LOS PEORES PADRES E HIJOS
        if(sumapeorespesos>0)
        {
            if ((aleatorio<peorpadre.getPeso()/sumapeorespesos))
            {
            	//poblaciontemporal.setIndividuoPoblacion(peorpadre,posiciontemporal);
            	poblaciontemporal[posiciontemporal]=peorpadre;
            	posiciontemporal=posiciontemporal+1;
            }
            else
            {
            	//poblaciontemporal.setIndividuoPoblacion(peorhijo,posiciontemporal);
            	poblaciontemporal[posiciontemporal]=peorhijo;
            	posiciontemporal=posiciontemporal+1;
            } 
        }
        else
        {
        	//poblaciontemporal.setIndividuoPoblacion(peorpadre,posiciontemporal);
        	poblaciontemporal[posiciontemporal]=peorpadre;
        	posiciontemporal=posiciontemporal+1;
        }
    }
  
}
